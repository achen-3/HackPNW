# Austin Chen and Micah Lam
# HackPNW 2024 Spring

import pygame,sys,math,random,re

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH, HEIGHT = 1000, 1000
FONT = pygame.font.Font(None, 36)
SUBJECTS = ['Numerical Odyssey', 'Discovery Quests', 'Time Traveler Trivia']
GRADES = list(range(1, 11)) 

# Set up the display
screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
WIDTH, HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h
# Set up the game state
state = {
	'subject': None,
	'level': 1,
}

# Setup for the Level select
class Level:
	def __init__(self, subject, difficulty):
		self.subject = subject
		self.difficulty = difficulty

	def generate_questions(self):
		# This is a placeholder. In a real application, you would use NLP and your
		# question database to generate appropriate questions for the subject and difficulty.
		return [f"{self.subject} question {i}" for i in range(1, self.difficulty + 1)]


# Functions for drawing text and buttons
def draw_text(text, x, y):
	text_surface = FONT.render(text, True, TEXT_COLOR)
	text_rect = text_surface.get_rect(center=(x, y))
	screen.blit(text_surface, text_rect)

BUTTON_COLOR = (0, 200, 200)
BUTTON_HOVER_COLOR = (0, 255, 255)
TEXT_COLOR = (255, 255, 255)

# New function for drawing circular buttons
def draw_circle_button(text, x, y, radius, color, hover_color, action=None):
	mouse = pygame.mouse.get_pos()
	click = pygame.mouse.get_pressed()

	if (x - mouse[0]) ** 2 + (y - mouse[1]) ** 2 < radius ** 2:
		pygame.draw.circle(screen, hover_color, (x, y), radius)
		if click[0] == 1 and action is not None:
			action()
			pygame.time.wait(200)  # Wait for 200 milliseconds
	else:
		pygame.draw.circle(screen, color, (x, y), radius)

	draw_text(text, x, y)

def draw_square_button(text, x, y, width, height, color, hover_color, action=None):
	mouse = pygame.mouse.get_pos()
	click = pygame.mouse.get_pressed()

	if x < mouse[0] < x + width and y < mouse[1] < y + height:
		pygame.draw.rect(screen, hover_color, (x, y, width, height))
		if click[0] == 1 and action is not None:
			action()
			pygame.time.wait(500)  # Wait for 200 milliseconds
	else:
		pygame.draw.rect(screen, color, (x, y, width, height))

	draw_text(text, x + width / 2, y + height / 2)


# def parse_questions(file_path, levels):
# 	with open(file_path, 'r') as file:
# 		content = file.read()

# 	# Split the content into sections for each grade
# 	grade_sections = re.split(r'\*\*Grade \d+ Science Questions:\*\*', content)[1:]

# 	questions = []
# 	for section in grade_sections:
# 		# Extract the grade
# 		grade_match = re.search(r'Grade (\d+)', section)
# 		grade = int(grade_match.group(1)) if grade_match else None

# 		# If this section's grade doesn't match the requested grade, skip it
# 		if grade != levels:
# 			continue

# 		# Extract the questions and answers
# 		question_matches = re.findall(r'\d+\. (.+)\n(?:   - [A-D]\) .+\n)+', section)
# 		answer_matches = re.findall(r'- ([A-D])\) (.+)', section)

# 		for question in question_matches:
# 			answers = {letter: answer for letter, answer in answer_matches}
# 			questions.append((question, answers))

# 	return questions

# # Usage:
# questions = parse_questions('/Users/micahlam/Documents/GitHub/HackPNW/Science Questions', 1)
# for question, answers in questions:
# 	print(f"Question: {question}")
# 	print("Answers:")
# 	for letter, answer in answers.items():
# 		print(f"{letter}) {answer}")



def generate_math_problem():
	num1 = random.randint(1, 10)
	num2 = random.randint(1, 10)
	operator = random.choice(['+', '-', '*', '/', 'log', 'exp'])

	if operator == '+':
		question = f"{num1} + {num2}"
		answer = num1 + num2
	elif operator == '-':
		question = f"{num1} - {num2}"
		answer = num1 - num2
	elif operator == '*':
		question = f"{num1} * {num2}"
		answer = num1 * num2
	elif operator == '/':
		# For division, we'll make sure to divide the larger number by the smaller one
		# to avoid fractional answers.
		num1, num2 = max(num1, num2), min(num1, num2)
		question = f"{num1} / {num2}"
		answer = num1 / num2
	elif operator == 'log':
		# For log, we'll use num1 as the base and num2 as the number
		question = f"log_{num1}({num2})"
		answer = math.log(num2, num1)
	else:  # operator == 'exp'
		# For exponentiation, we'll use num1 as the base and num2 as the exponent
		question = f"{num1}^{num2}"
		answer = num1 ** num2

	return question, answer
# Initialize the game state
state = {
	'subject': None,
	'grade': None,
}

def choose_subject(subject):
	state['subject'] = subject

def choose_grade(grade):
	state['grade'] = grade

def make_grade_lambda(grade):
	return lambda: choose_grade(grade)

def make_subject_lambda(subject):
	return lambda: choose_subject(subject)

def draw_level_buttons():
	button_radius = 25
	button_spacing = WIDTH // (len(GRADES) + 1)
	for i, grade in enumerate(GRADES):
		x = button_spacing * (i + 1)
		draw_circle_button(str(grade), x, HEIGHT / 2 - button_radius, button_radius, BUTTON_COLOR, BUTTON_HOVER_COLOR, make_grade_lambda(grade))

def draw_subject_buttons():
	if state['grade'] is None:  # Ignore clicks on subject buttons if grade is not yet selected
		return

	button_width = 300
	button_height = 50
	button_spacing = (WIDTH - button_width * len(SUBJECTS)) // (len(SUBJECTS) + 1)
	for i, subject in enumerate(SUBJECTS):
		x = button_spacing * (i + 1) + button_width * i
		y = HEIGHT / 2 - button_height / 2
		draw_square_button(subject, x, y, button_width, button_height, BUTTON_COLOR, BUTTON_HOVER_COLOR, make_subject_lambda(subject))

# Adjust the y-coordinate of the welcome text to be at the top of the screen
draw_text('Welcome to Study Quest!', WIDTH / 2, HEIGHT / 10)
while True:
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			pygame.quit()
			sys.exit()

	screen.fill((0, 0, 0))

	if state['grade'] is None:
		draw_text('Welcome to Study Quest!', WIDTH / 2, 50)  # Move the welcome text to the top
		draw_level_buttons()
	elif state['subject'] is None:
		draw_text(f"Current Level: {state['grade']}", WIDTH / 2, 100)  # Display the chosen grade below the welcome text
		draw_subject_buttons()
	else:
		draw_text(f"Current Level: {state['grade']}", WIDTH / 2, 50)  # Display the chosen grade at the top
		draw_text(f"Current Subject: {state['subject']}", WIDTH / 2, 100)  # Display the chosen subject below the grade

	pygame.display.flip()