# Austin Chen and Micah Lam
# HackPNW 2024 Spring

import pygame,sys,math,random, pygame.gfxdraw

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH, HEIGHT = 1000, 1000
FONT = pygame.font.Font(None, 36)
SUBJECTS = ['Numerical Odyssey', 'Discovery Quests', 'Time Traveler Trivia']
GRADES = list(range(1, 11)) 

# Set up the display
screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
WIDTH, HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h
pygame.display.set_caption('Study Quest')

# Functions for drawing text and buttons
def draw_text(text, x, y):
	text_surface = FONT.render(text, True, TEXT_COLOR)
	text_rect = text_surface.get_rect(center=(x, y))
	screen.blit(text_surface, text_rect)

BUTTON_COLOR = (0, 200, 200)
BUTTON_HOVER_COLOR = (0, 255, 255)
TEXT_COLOR = (255, 255, 255)

# New function for drawing circular buttons
def draw_circle_button(text, x, y, radius, color, hover_color, action=None):
	mouse = pygame.mouse.get_pos()
	click = pygame.mouse.get_pressed()

	if (x - mouse[0]) ** 2 + (y - mouse[1]) ** 2 < radius ** 2:
		pygame.draw.circle(screen, hover_color, (x, y), radius)
		if click[0] == 1 and action is not None:
			action()
			pygame.time.wait(300)  # Wait for 200 milliseconds
	else:
		pygame.draw.circle(screen, color, (x, y), radius)

	draw_text(text, x, y)

def draw_square_button(text, x, y, width, height, color, hover_color, action=None):
    mouse = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()

    rect = pygame.Rect(x, y, width, height)
    color = hover_color if rect.collidepoint(mouse) else color
    draw_rounded_rect(screen, rect, color, 10)

    if rect.collidepoint(mouse) and click[0] == 1 and action is not None:
        action()
        while pygame.mouse.get_pressed()[0]:  # Wait for the mouse button to be released
            pygame.event.pump()  # Process events to prevent the application from becoming unresponsive

    draw_text(text, x + width / 2, y + height / 2)


def draw_rounded_rect(surface, rect, color, corner_radius):
    """Draw a rectangle with rounded corners"""
    if corner_radius < 0:
        raise ValueError(f"Corner radius {corner_radius} must be >= 0")
    elif corner_radius > min(rect.width, rect.height) / 2:
        raise ValueError(f"Corner radius {corner_radius} must be <= min(rect.width, rect.height) / 2")

    # Draw the four corners
    pygame.gfxdraw.aacircle(surface, rect.left + corner_radius, rect.top + corner_radius, corner_radius, color)
    pygame.gfxdraw.filled_circle(surface, rect.left + corner_radius, rect.top + corner_radius, corner_radius, color)
    pygame.gfxdraw.aacircle(surface, rect.right - corner_radius - 1, rect.top + corner_radius, corner_radius, color)
    pygame.gfxdraw.filled_circle(surface, rect.right - corner_radius - 1, rect.top + corner_radius, corner_radius, color)
    pygame.gfxdraw.aacircle(surface, rect.left + corner_radius, rect.bottom - corner_radius - 1, corner_radius, color)
    pygame.gfxdraw.filled_circle(surface, rect.left + corner_radius, rect.bottom - corner_radius - 1, corner_radius, color)
    pygame.gfxdraw.aacircle(surface, rect.right - corner_radius - 1, rect.bottom - corner_radius - 1, corner_radius, color)
    pygame.gfxdraw.filled_circle(surface, rect.right - corner_radius - 1, rect.bottom - corner_radius - 1, corner_radius, color)

    # Draw the four edge rectangles
    pygame.draw.rect(surface, color, pygame.Rect(rect.left, rect.top + corner_radius, corner_radius, rect.height - 2 * corner_radius))
    pygame.draw.rect(surface, color, pygame.Rect(rect.right - corner_radius, rect.top + corner_radius, corner_radius, rect.height - 2 * corner_radius))
    pygame.draw.rect(surface, color, pygame.Rect(rect.left + corner_radius, rect.top, rect.width - 2 * corner_radius, corner_radius))
    pygame.draw.rect(surface, color, pygame.Rect(rect.left + corner_radius, rect.bottom - corner_radius, rect.width - 2 * corner_radius, corner_radius))



# Initialize the game state
state = {
	'screen_stack': ['title'],
	'subject': None,
	'grade': None,
}

def navigate_to(screen):
	state['screen_stack'].append(screen)

def back():
	if len(state['screen_stack']) > 1:
		state['screen_stack'].pop()

def start_game():
	navigate_to('grade')

def choose_grade(grade):
	state['grade'] = grade
	navigate_to('subject')

def choose_subject(subject):
	state['subject'] = subject
	navigate_to('game')

def make_grade_lambda(grade):
	return lambda: choose_grade(grade)

def make_subject_lambda(subject):
	return lambda: choose_subject(subject)

def draw_level_buttons():
	button_radius = 50
	button_spacing = WIDTH // (len(GRADES) + 1)
	for i, grade in enumerate(GRADES):
		# Create a gradient from green to red
		color = (255 * i // len(GRADES), 255 - 255 * i // len(GRADES), 0)
		hover_color = (min(255, color[0] + 50), max(0, color[1] - 50), 0)
		x = button_spacing * (i + 1)
		draw_circle_button(str(grade), x, HEIGHT / 2 - button_radius, button_radius, color, hover_color, make_grade_lambda(grade))
	draw_text('Level Select', WIDTH / 2, HEIGHT / 4)

def draw_subject_buttons():
	if state['grade'] is None:  # Ignore clicks on subject buttons if grade is not yet selected
		return

	button_width = 300
	button_height = 50
	button_spacing = (WIDTH - button_width * len(SUBJECTS)) // (len(SUBJECTS) + 1)
	for i, subject in enumerate(SUBJECTS):
		x = button_spacing * (i + 1) + button_width * i
		y = HEIGHT / 2 - button_height / 2
		draw_square_button(subject, x, y, button_width, button_height, BUTTON_COLOR, BUTTON_HOVER_COLOR, make_subject_lambda(subject))
	draw_text('Choose Game Mode', WIDTH / 2, HEIGHT / 4)  # Add this line

# Adjust the y-coordinate of the welcome text to be at the top of the screen
draw_text('Welcome to Study Quest!', WIDTH / 2, HEIGHT / 10)
def draw_back_button():
	button_width = 100
	button_height = 50
	x = WIDTH - button_width - 20  
	y = HEIGHT - button_height - 20  
	draw_square_button('Back', x, y, button_width, button_height, BUTTON_COLOR, BUTTON_HOVER_COLOR, back)

def reset_state():
	state['subject'] = None
	state['grade'] = None
	state['screen'] = 'title'

# Main game loop

def draw_title_screen():
	draw_text('Welcome to Study Quest!', WIDTH / 2, HEIGHT / 3)
	draw_text('Click Start to begin', WIDTH / 2, HEIGHT / 2)
	button_width = 200
	button_height = 50
	x = (WIDTH - button_width) / 2
	y = HEIGHT * 2 / 3
	draw_square_button('Start', x, y, button_width, button_height, BUTTON_COLOR, BUTTON_HOVER_COLOR, start_game)



# Main game loop
while True:
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			pygame.quit()
			sys.exit()

	screen.fill((0, 0, 0))

	current_screen = state['screen_stack'][-1]
	if current_screen == 'title':
		draw_title_screen()
	elif current_screen == 'grade':
		draw_level_buttons()
		draw_back_button()
	elif current_screen == 'subject':
		draw_text(f"Current Level: {state['grade']}", WIDTH / 2, 100)  
		draw_subject_buttons()
		draw_back_button()
	else:  # current_screen == 'game'
		draw_text(f"Current Level: {state['grade']}", WIDTH / 2, 50)  
		draw_text(f"Current Subject: {state['subject']}", WIDTH / 2, 100)  
		draw_back_button()

	pygame.display.flip()