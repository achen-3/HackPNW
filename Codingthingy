# Austin Chen and Micah Lam
# HackPNW 2024 Spring

import tkinter as tk
from tkinter import messagebox
import science_questions
import pygame,sys,math,random, pygame.gfxdraw

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH, HEIGHT = 1000, 1000
FONT = pygame.font.Font(None, 36)
SUBJECTS = ['Numerical Odyssey', 'Discovery Quests', 'Time Traveler Trivia']
GRADES = list(range(1, 11))
QUESTION_BUTTON_SPACING = 100

# Set up the display
screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
WIDTH, HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h
pygame.display.set_caption('Study Quest')

# Functions for drawing text and buttons
def draw_text(text, x, y):
	text_surface = FONT.render(text, True, TEXT_COLOR)
	text_rect = text_surface.get_rect(center=(x, y))
	screen.blit(text_surface, text_rect)

BUTTON_COLOR = (0, 200, 200)
BUTTON_HOVER_COLOR = (0, 255, 255)
TEXT_COLOR = (255, 255, 255)

# New function for drawing circular buttons
def draw_circle_button(text, x, y, radius, color, hover_color, action=None):
	mouse = pygame.mouse.get_pos()
	click = pygame.mouse.get_pressed()

	if (x - mouse[0]) ** 2 + (y - mouse[1]) ** 2 < radius ** 2:
		pygame.draw.circle(screen, hover_color, (x, y), radius)
		if click[0] == 1 and action is not None:
			action()
			pygame.time.wait(300)  # Wait for 200 milliseconds
	else:
		pygame.draw.circle(screen, color, (x, y), radius)

	draw_text(text, x, y)

def draw_square_button(text, x, y, width, height, color, hover_color, action=None):
	mouse = pygame.mouse.get_pos()
	click = pygame.mouse.get_pressed()
def draw_square_button(text, x, y, width, height, color, hover_color, action=None, is_back_button=False):
	mouse = pygame.mouse.get_pos()
	click = pygame.mouse.get_pressed()
def draw_square_button(text, x, y, width, height, color, hover_color, action=None, is_back_button=False):
	mouse = pygame.mouse.get_pos()
	click = pygame.mouse.get_pressed()

	rect = pygame.Rect(x, y, width, height)
	color = hover_color if rect.collidepoint(mouse) else color
	draw_rounded_rect(screen, rect, color, 10)

	if rect.collidepoint(mouse) and click[0] == 1 and action is not None:
		action()
		while pygame.mouse.get_pressed()[0]:  # Wait for the mouse button to be released
			pygame.event.pump()  # Process events to prevent the application from becoming unresponsive

	draw_text(text, x + width / 2, y + height / 2)
	if is_back_button:
		# Draw the back arrow
		arrow_color = (255, 255, 255)  # White
		arrow_margin = 10  # Margin from the edges of the button
		arrow_width = 10  # Width of the arrow
		arrow_height = height / 4  # Height of the arrow
		arrow_points = [(x + arrow_margin, y + height / 2), (x + arrow_margin + arrow_width, y + height / 2 - arrow_height / 2), (x + arrow_margin + arrow_width, y + height / 2 + arrow_height / 2)]
		pygame.draw.polygon(screen, arrow_color, arrow_points)

	# Draw the text at the center of the button
	text_x = x + width / 2
	text_y = y + height / 2
	draw_text(text, text_x, text_y)



def draw_rounded_rect(surface, rect, color, corner_radius):
	"""Draw a rectangle with rounded corners"""
	if corner_radius < 0:
		raise ValueError(f"Corner radius {corner_radius} must be >= 0")
	elif corner_radius > min(rect.width, rect.height) / 2:
		raise ValueError(f"Corner radius {corner_radius} must be <= min(rect.width, rect.height) / 2")

	# Draw the four corners
	pygame.gfxdraw.aacircle(surface, rect.left + corner_radius, rect.top + corner_radius, corner_radius, color)
	pygame.gfxdraw.filled_circle(surface, rect.left + corner_radius, rect.top + corner_radius, corner_radius, color)
	pygame.gfxdraw.aacircle(surface, rect.right - corner_radius - 1, rect.top + corner_radius, corner_radius, color)
	pygame.gfxdraw.filled_circle(surface, rect.right - corner_radius - 1, rect.top + corner_radius, corner_radius, color)
	pygame.gfxdraw.aacircle(surface, rect.left + corner_radius, rect.bottom - corner_radius - 1, corner_radius, color)
	pygame.gfxdraw.filled_circle(surface, rect.left + corner_radius, rect.bottom - corner_radius - 1, corner_radius, color)
	pygame.gfxdraw.aacircle(surface, rect.right - corner_radius - 1, rect.bottom - corner_radius - 1, corner_radius, color)
	pygame.gfxdraw.filled_circle(surface, rect.right - corner_radius - 1, rect.bottom - corner_radius - 1, corner_radius, color)

	# Draw the four edge rectangles
	pygame.draw.rect(surface, color, pygame.Rect(rect.left, rect.top + corner_radius, corner_radius, rect.height - 2 * corner_radius))
	pygame.draw.rect(surface, color, pygame.Rect(rect.right - corner_radius, rect.top + corner_radius, corner_radius, rect.height - 2 * corner_radius))
	pygame.draw.rect(surface, color, pygame.Rect(rect.left + corner_radius, rect.top, rect.width - 2 * corner_radius, corner_radius))
	pygame.draw.rect(surface, color, pygame.Rect(rect.left + corner_radius, rect.bottom - corner_radius, rect.width - 2 * corner_radius, corner_radius))



	# Draw the center rectangle
	pygame.draw.rect(surface, color, pygame.Rect(rect.left + corner_radius, rect.top + corner_radius, rect.width - 2 * corner_radius, rect.height - 2 * corner_radius))








# Initialize the game state
state = {
	'screen_stack': ['title'],
	'subject': None,
	'grade': None,
}
state['question_number'] = None

def get_questions_for_grade(grade):
	# Get all attributes of the science_questions module
	all_questions = dir(science_questions)

	# Initialize an empty list to store the questions for the grade
	grade_questions = []

	# Iterate over all questions
	for question in all_questions:
		# Check if the question is for the given grade
		if question.startswith(f"Grade{grade}"):
			# If it is, add it to the list
			question_list = getattr(science_questions, question)
			grade_questions.append(question_list)

	# Return the list of questions for the grade
	return grade_questions




def choose_subject(subject):
	state['subject'] = subject
def navigate_to(screen):
	state['screen_stack'].append(screen)

def back():
	if len(state['screen_stack']) > 1:
		state['screen_stack'].pop()

def start_game():
	navigate_to('grade')

def choose_grade(grade):
	state['grade'] = grade
	navigate_to('subject')

def choose_subject(subject):
	state['subject'] = subject
	navigate_to('game')

def make_grade_lambda(grade):
	return lambda: choose_grade(grade)

def make_subject_lambda(subject):
	return lambda: choose_subject(subject)

def draw_level_buttons():
	button_radius = 50
	button_spacing = WIDTH // (len(GRADES) + 1)
	for i, grade in enumerate(GRADES):
		# Create a gradient from green to red
		color = (255 * i // len(GRADES), 255 - 255 * i // len(GRADES), 0)
		hover_color = (min(255, color[0] + 50), max(0, color[1] - 50), 0)
		x = button_spacing * (i + 1)
		draw_circle_button(str(grade), x, HEIGHT / 2 - button_radius, button_radius, color, hover_color, make_grade_lambda(grade))
	draw_text('Level Select', WIDTH / 2, HEIGHT / 4)

def draw_subject_buttons():
	if state['grade'] is None:  # Ignore clicks on subject buttons if grade is not yet selected
		return

	button_width = 300
	button_height = 50
	button_spacing = (WIDTH - button_width * len(SUBJECTS)) // (len(SUBJECTS) + 1)
	for i, subject in enumerate(SUBJECTS):
		x = button_spacing * (i + 1) + button_width * i
		y = HEIGHT / 2 - button_height / 2
		draw_square_button(subject, x, y, button_width, button_height, BUTTON_COLOR, BUTTON_HOVER_COLOR, make_subject_lambda(subject))
	draw_text('Choose Game Mode', WIDTH / 2, HEIGHT / 4)  # Add this line

# Adjust the y-coordinate of the welcome text to be at the top of the screen
draw_text('Welcome to Study Quest!', WIDTH / 2, HEIGHT / 10)
def draw_back_button():
	button_width = 100
	button_height = 50
	x = WIDTH - button_width - 20  
	y = HEIGHT - button_height - 20  
	draw_square_button("Back", 50, 50, 100, 50, (0, 0, 255), (0, 0, 128), back, True)
def reset_state():
	state['subject'] = None
	state['grade'] = None
	state['screen'] = 'title'

# Main game loop

def draw_title_screen():
	draw_text('Welcome to Study Quest!', WIDTH / 2, HEIGHT / 3)
	draw_text('Click Start to begin', WIDTH / 2, HEIGHT / 2)
	button_width = 200
	button_height = 50
	x = (WIDTH - button_width) / 2
	y = HEIGHT * 2 / 3
	draw_square_button('Start', x, y, button_width, button_height, BUTTON_COLOR, BUTTON_HOVER_COLOR, start_game)
 
# def draw_button(text, x, y):
# 	# Draw the button
# 	pygame.draw.rect(screen, (255, 255, 255), pygame.Rect(x, y, 200, 50))

def text_objects(text, font):
    text_surface = font.render(text, True, (0, 0, 0))  # Replace (0, 0, 0) with the color you want for the text
    return text_surface, text_surface.get_rect()


def draw_button(text, x, y, width, height, color, hover_color, action=None):
    mouse = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()

    if x + width > mouse[0] > x and y + height > mouse[1] > y:
        pygame.draw.rect(screen, hover_color, (x, y, width, height))
        if click[0] == 1 and action is not None:
            action()
    else:
        pygame.draw.rect(screen, color, (x, y, width, height))

    small_text = pygame.font.Font("freesansbold.ttf", 20)
    text_surf, text_rect = text_objects(text, small_text)
    text_rect.center = ((x + (width / 2)), (y + (height / 2)))
    screen.blit(text_surf, text_rect)
 
def draw_question_and_answers():
    questions = get_questions_for_grade(state['grade'])
    if state['question_number'] is None:
        state['question_number'] = 0  # Start with the first question
    question_data = questions[state['question_number']]
    draw_text(question_data[0], WIDTH / 2, 150)  # Draw the question
    for i in range(4):
        button_text = question_data[i + 1]
        button_x = WIDTH / 2
        button_y = 200 + i * 60
        button_width = 200
        button_height = 50
        button_color = (0, 0, 255)
        button_hover_color = (0, 0, 128)
        button_action = None  # Replace with the actual action
        draw_button(button_text, button_x, button_y, button_width, button_height, button_color, button_hover_color, button_action)




# 	# Draw the text
# 	draw_text(text, x + 100, y + 25)

# 	# Check if the button is clicked
# 	mouse = pygame.mouse.get_pos()
# 	click = pygame.mouse.get_pressed()
# 	if x < mouse[0] < x + 200 and y < mouse[1] < y + 50:
# 		if click[0] == 1:
# 			return True

# 	return False

# Main game loop
# while True:
# 	for event in pygame.event.get():
# 		if event.type == pygame.QUIT:
# 			pygame.quit()
# 			sys.exit()

# 	screen.fill((0, 0, 0))

# 	current_screen = state['screen_stack'][-1]
# 	if current_screen == 'title':
# 		draw_title_screen()
# 	elif current_screen == 'grade':
# 		draw_level_buttons()
# 		draw_back_button()
# 	elif current_screen == 'subject':
# 		draw_text(f"Current Level: {state['grade']}", WIDTH / 2, 100)  
# 		draw_subject_buttons()
# 		draw_back_button()
# 	else:  # current_screen == 'game'
# 		draw_text(f"Current Level: {state['grade']}", WIDTH / 2, 50)  
# 		draw_text(f"Current Subject: {state['subject']}", WIDTH / 2, 100)  
# 		draw_back_button()

# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    screen.fill((0, 0, 0))

    if state['grade'] is None:
        draw_text('Welcome to Study Quest!', WIDTH / 2, 50)  # Move the welcome text to the top
        draw_level_buttons()
    elif state['subject'] is None:
        draw_text(f"Current Level: {state['grade']}", WIDTH / 2, 100)  # Display the chosen grade below the welcome text
        draw_subject_buttons()
    else:
        draw_text(f"Current Level: {state['grade']}", WIDTH / 2, 50)  # Display the chosen grade at the top
        draw_text(f"Current Subject: {state['subject']}", WIDTH / 2, 100)  # Display the chosen subject below the grade
        if state['subject'] == 'Discovery Quests':
            draw_question_and_answers()

    pygame.display.flip()